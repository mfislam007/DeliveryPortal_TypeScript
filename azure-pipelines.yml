trigger:
  - master
  - dev
  - test
  - feature/pipeline-modularization

variables:
  VMImageName: "ubuntu-latest"

stages:
  - stage: Testing
    jobs:
      #########################################################################
      # Programmer defined tests, result reporting, and production build test #
      #########################################################################
      - job: Testing
        pool:
          vmImage: $(VMImageName)
        timeoutInMinutes: 3
        steps:
          - task: NodeTool@0
            inputs:
              versionSpec: "12.x"
            displayName: "Install Node.js"

          - script: yarn install
            displayName: "Install dependencies"
            condition: succeeded()

          - script: yarn test
            displayName: "Run tests"
            condition: succeeded()

          - task: PublishTestResults@2
            displayName: "Publish test results"
            condition: succeededOrFailed()
            inputs:
              testRunner: JUnit
              testResultsFiles: "./.jest/coverage/test-results.xml"

          - task: PublishCodeCoverageResults@1
            displayName: "Publish code coverage results"
            condition: succeededOrFailed()
            inputs:
              codeCoverageTool: Cobertura
              summaryFileLocation: "$(System.DefaultWorkingDirectory)/.jest/coverage/clover.xml"
              reportDirectory: "$(System.DefaultWorkingDirectory)/.jest/coverage/lcov-report"

          - script: yarn build-production
            displayName: "Build production"
            condition: succeeded()

  - stage: Deployment
    dependsOn: Testing
    condition: succeeded()
    variables:
      - group: Deployment
    jobs:
      ################################
      # Deployment to Heroku via Git #
      ################################
      - job: Deployment_to_Heroku
        displayName: "Deployment to Heroku"
        pool:
          vmImage: $(VMImageName)
        variables:
          - group: Deployment
        timeoutInMinutes: 6
        steps:
          - script: |
              git fetch https://git.heroku.com/$(HEROKU_APP_NAME_DELIVERY_PORTAL_FRONTEND_REACT).git
              git checkout $(Build.SourceBranchName)
              git remote add heroku https://heroku:$(HEROKU_AUTHORIZATION_TOKEN)@git.heroku.com/$(HEROKU_APP_NAME_DELIVERY_PORTAL_FRONTEND_REACT).git
              git push heroku $(Build.SourceBranchName)
            displayName: "Deploy to Heroku"
            condition: succeeded()

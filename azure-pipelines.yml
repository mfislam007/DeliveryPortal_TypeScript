trigger:
  - master
  - dev
  - test
  - feature/pipeline-modularization

stages:
  - stage: Main
    displayName: "Main stage"
    variables:
      VMImageName: "ubuntu-latest" # Used in all jobs
      environmentName: "Project-X"
    jobs:
      #################################################
      # Programmer defined tests and result reporting #
      #################################################
      - job: Programmatic_tests
        displayName: "Jest and Enzyme tests"
        pool:
          vmImage: $(VMImageName)
        timeoutInMinutes: 3
        steps:
          - task: NodeTool@0
            inputs:
              versionSpec: "12.x"
            displayName: "Install Node.js"

          - script: yarn install
            displayName: "Install dependencies"
            condition: succeeded()

          - script: yarn test
            displayName: "Run tests"
            condition: succeeded()

          - task: PublishTestResults@2
            displayName: "Publish test results"
            condition: succeededOrFailed()
            inputs:
              testRunner: JUnit
              testResultsFiles: "./.jest/coverage/test-results.xml"

          - task: PublishCodeCoverageResults@1
            displayName: "Publish code coverage results"
            condition: succeededOrFailed()
            inputs:
              codeCoverageTool: Cobertura
              summaryFileLocation: "$(System.DefaultWorkingDirectory)/.jest/coverage/clover.xml"
              reportDirectory: "$(System.DefaultWorkingDirectory)/.jest/coverage/lcov-report"

      #############################################
      # Testing whether production build succeeds #
      #############################################
      - job: Production_build_test
        displayName: "Production build test"
        pool:
          vmImage: $(VMImageName)
        timeoutInMinutes: 3
        steps:
          - task: NodeTool@0
            inputs:
              versionSpec: "12.x"
            displayName: "Install Node.js"

          - script: yarn install
            displayName: "Install dependencies"
            condition: succeeded()

          - script: yarn build-production
            displayName: "Run production build"
            condition: succeeded()

      ##############
      # Deployment #
      ##############
      - deployment: Deployment_to_Heroku
        dependsOn: # Awaits both test jobs to finish
          - Programmatic_tests
          - Production_build_test
        condition: succeeded()
        environment: $(environmentName)
        pool:
          vmImage: $(VMImageName)
        variables:
          - group: Deployment
        timeoutInMinutes: 6
        strategy:
          runOnce:
            deploy:
              steps:
                - script: |
                    sudo apt-get update -qy
                    sudo apt-get install -y ruby-dev
                    sudo gem install dpl
                    sudo dpl --provider=heroku --app=$(HEROKU_APP_NAME_DELIVERY_PORTAL_FRONTEND_REACT) --api-key=$(HEROKU_API_KEY) --skip_cleanup
                  displayName: "Deploy to Heroku"
